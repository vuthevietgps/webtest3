import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { CreateProductCategoryDto } from './dto/create-product-category.dto';
import { UpdateProductCategoryDto } from './dto/update-product-category.dto';
import { ProductCategory, ProductCategoryDocument } from './schemas/product-category.schema';

@Injectable()
export class ProductCategoryService {
  constructor(
    @InjectModel(ProductCategory.name) 
    private productCategoryModel: Model<ProductCategoryDocument>
  ) {}

  async create(createProductCategoryDto: CreateProductCategoryDto): Promise<ProductCategory> {
    // T·ª± ƒë·ªông set order n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
    if (!createProductCategoryDto.order) {
      const count = await this.productCategoryModel.countDocuments();
      createProductCategoryDto.order = count + 1;
    }

    // T·ª± ƒë·ªông t·∫°o code n·∫øu kh√¥ng ƒë∆∞·ª£c cung c·∫•p
    if (!createProductCategoryDto.code) {
      const count = await this.productCategoryModel.countDocuments();
      createProductCategoryDto.code = `CAT${String(count + 1).padStart(3, '0')}`;
    }

    const createdCategory = new this.productCategoryModel(createProductCategoryDto);
    return createdCategory.save();
  }

  async findAll(): Promise<ProductCategory[]> {
    return this.productCategoryModel
      .find()
      .sort({ order: 1, createdAt: -1 })
      .exec();
  }

  async findOne(id: string): Promise<ProductCategory> {
    const category = await this.productCategoryModel.findById(id).exec();
    if (!category) {
      throw new NotFoundException(`Product Category with ID ${id} not found`);
    }
    return category;
  }

  async update(id: string, updateProductCategoryDto: UpdateProductCategoryDto): Promise<ProductCategory> {
    const updatedCategory = await this.productCategoryModel
      .findByIdAndUpdate(id, updateProductCategoryDto, { new: true })
      .exec();
    
    if (!updatedCategory) {
      throw new NotFoundException(`Product Category with ID ${id} not found`);
    }
    return updatedCategory;
  }

  async remove(id: string): Promise<void> {
    const result = await this.productCategoryModel.findByIdAndDelete(id).exec();
    if (!result) {
      throw new NotFoundException(`Product Category with ID ${id} not found`);
    }
  }

  // L·∫•y c√°c nh√≥m s·∫£n ph·∫©m ƒëang ho·∫°t ƒë·ªông
  async getActiveCategories(): Promise<ProductCategory[]> {
    return this.productCategoryModel
      .find({ isActive: true })
      .sort({ order: 1 })
      .exec();
  }

  // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong nh√≥m
  async updateProductCount(id: string, count: number): Promise<ProductCategory> {
    const updatedCategory = await this.productCategoryModel
      .findByIdAndUpdate(id, { productCount: count }, { new: true })
      .exec();
    
    if (!updatedCategory) {
      throw new NotFoundException(`Product Category with ID ${id} not found`);
    }
    return updatedCategory;
  }

  // C·∫≠p nh·∫≠t th·ª© t·ª± hi·ªÉn th·ªã
  async updateOrder(id: string, newOrder: number): Promise<ProductCategory> {
    const updatedCategory = await this.productCategoryModel
      .findByIdAndUpdate(id, { order: newOrder }, { new: true })
      .exec();
    
    if (!updatedCategory) {
      throw new NotFoundException(`Product Category with ID ${id} not found`);
    }
    return updatedCategory;
  }

  // Th·ªëng k√™ t·ªïng quan
  async getStatsSummary() {
    const total = await this.productCategoryModel.countDocuments();
    const active = await this.productCategoryModel.countDocuments({ isActive: true });
    const totalProducts = await this.getTotalProductCount();
    
    return {
      total,
      active,
      inactive: total - active,
      totalProducts,
      averageProductsPerCategory: total > 0 ? Math.round(totalProducts / total) : 0
    };
  }

  private async getTotalProductCount(): Promise<number> {
    const categories = await this.productCategoryModel.find({ productCount: { $exists: true, $ne: null } });
    return categories.reduce((acc, category) => acc + (category.productCount || 0), 0);
  }

  // Method ƒë·ªÉ seed d·ªØ li·ªáu m·∫´u v·ªõi encoding UTF-8 ƒë√∫ng
  async seedSampleData(): Promise<ProductCategory[]> {
    // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu c≈©
    await this.productCategoryModel.deleteMany({});
    
    const sampleData = [
      {
        name: 'ƒêi·ªán t·ª≠',
        description: 'C√°c s·∫£n ph·∫©m ƒëi·ªán t·ª≠ v√† thi·∫øt b·ªã c√¥ng ngh·ªá',
        color: '#3498db',
        icon: 'üì±',
        isActive: true,
        order: 1,
        code: 'CAT001',
        productCount: 25,
        notes: 'Bao g·ªìm ƒëi·ªán tho·∫°i, laptop, tablet v√† ph·ª• ki·ªán'
      },
      {
        name: 'Th·ªùi trang',
        description: 'Qu·∫ßn √°o, gi√†y d√©p v√† ph·ª• ki·ªán th·ªùi trang',
        color: '#e74c3c',
        icon: 'üëï',
        isActive: true,
        order: 2,
        code: 'CAT002',
        productCount: 150,
        notes: 'Th·ªùi trang nam, n·ªØ v√† tr·∫ª em'
      },
      {
        name: 'Gia d·ª•ng',
        description: 'ƒê·ªì d√πng gia ƒë√¨nh v√† thi·∫øt b·ªã nh√† b·∫øp',
        color: '#f39c12',
        icon: 'üè†',
        isActive: true,
        order: 3,
        code: 'CAT003',
        productCount: 80,
        notes: 'ƒê·ªì n·ªôi th·∫•t, ƒë·ªì trang tr√≠ v√† d·ª•ng c·ª• nh√† b·∫øp'
      },
      {
        name: 'S√°ch & VƒÉn ph√≤ng ph·∫©m',
        description: 'S√°ch, t·∫°p ch√≠ v√† ƒë·ªì d√πng vƒÉn ph√≤ng',
        color: '#27ae60',
        icon: 'üìö',
        isActive: true,
        order: 4,
        code: 'CAT004',
        productCount: 45,
        notes: 'S√°ch gi√°o khoa, s√°ch tham kh·∫£o v√† vƒÉn ph√≤ng ph·∫©m'
      },
      {
        name: 'Th·ªÉ thao & Gi·∫£i tr√≠',
        description: 'D·ª•ng c·ª• th·ªÉ thao v√† ƒë·ªì ch∆°i gi·∫£i tr√≠',
        color: '#9b59b6',
        icon: '‚öΩ',
        isActive: false,
        order: 5,
        code: 'CAT005',
        productCount: 12,
        notes: 'T·∫°m ng·ª´ng kinh doanh'
      }
    ];

    const createdRecords = [];
    for (const data of sampleData) {
      const created = new this.productCategoryModel(data);
      createdRecords.push(await created.save());
    }

    return createdRecords;
  }
}
